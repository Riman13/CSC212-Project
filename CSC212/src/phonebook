
public class phonebook {

  static LinkedList<Contact> contacts ;
  static LinkedList<Event> events ;
  
  
  
 public  phonebook () {
	 contacts = new LinkedList<Contact>() ;
      }
 

 public phonebook(LinkedList<Contact> contacts) {
	this.contacts=contacts ;
 }
 
 
 
 
 public static boolean Search (Contact c) {
     if (contacts.isEmpty()== false) {
 contacts.findFirst();
 while (contacts.last()== false) {
  if ((contacts.retrieve().getContact_name().equalsIgnoreCase(c.getContact_name()))||
        (contacts.retrieve().getPhoneNumber().equals(c.getPhoneNumber())))
           return true;
      contacts.findNext(); }
      if ((contacts.retrieve().getContact_name().equalsIgnoreCase(c.getContact_name()))||
        (contacts.retrieve().getPhoneNumber().equals(c.getPhoneNumber())))
           return true;
      else
    	  return false;

      }
     return false;
     
 }//search
 
 
 
public static void addsorted (Contact c) {
	
 if (contacts.isEmpty()) {
 contacts.insertSort(c);   
 return;
 }
 
 else {
	 while (!contacts.last())
	 contacts.findFirst();
	 if (c.compareTo(contacts.retrieve().getContact_name())<0) {
		Contact newNode = new Contact() ;
		contacts.update(c);
		contacts.insertSort(newNode);
		return;
	 }
	 
		 if (contacts.retrieve().compareTo(c.getContact_name())<=0) {
			 contacts.findFirst();
			 
	 }
		 
		 if (contacts.retrieve().compareTo(c.getContact_name())>0){
				Contact newNode1 = new Contact() ;
				contacts.update(c);
				contacts.insertSort(newNode1); 
				
				
		 }
				else {
					contacts.insertSort(c);
				}
		 
 }//else
	 
    }//addsortd

 public static void add_contact(Contact a) {
	 if(!Search(a)) {
	   addsorted(a);
	 }//if
	 
 }//ass_contact
 
 
 
 public void deleteContact (String con) {
	 if (!contacts.isEmpty()){
       System.out.println("The list is empty you can't delete it");
       return;
	 }
	 contacts.findFirst();
	 while (contacts.last()== false) {
	     if (contacts.retrieve().getContact_name().equalsIgnoreCase(con)){
	     contacts.remove();
	     System.out.println ("contact" + con + " has been deleted successfully");
	     return;
	     }
	     contacts.findNext();
	 }
	   if (contacts.retrieve().getContact_name().equalsIgnoreCase(con)){
	     contacts.remove();
	     System.out.println ("contact" + con + " has been deleted successfully");
	     return; 
	     }
	   }//deletecontact


 public Contact searchByName(String n){ 
	  if (contacts.isEmpty())
	  return null;
	  
	    contacts.findFirst();
	while (!contacts.last()) {
	    if (contacts.retrieve().getContact_name().equalsIgnoreCase(n))
	    return contacts.retrieve();
	    
	    	contacts.findNext();
	    }//while
	
	    if (contacts.retrieve().getContact_name().equalsIgnoreCase(n))
	    return contacts.retrieve();
	   
	return null;
	}
 
 
 public Contact searchByPhone(String p){ 
	  if (contacts.isEmpty())
	  return null;
	  
	    contacts.findFirst();
	while (!contacts.last()) {
	    if (contacts.retrieve().getPhoneNumber().equals(p))
	    return contacts.retrieve();
	    
	    	contacts.findNext();
	    }//while
	
	    if (contacts.retrieve().getContact_name().equalsIgnoreCase(p))
	    return contacts.retrieve();
	   
	return null;
	}
 
 
public LinkedList<Contact> searchByEmail(String eml){ 
 LinkedList<Contact> eventByType = new LinkedList<Contact> ()  ;    
  if (contacts.isEmpty()==false){
    contacts.findFirst();
while (contacts.last()== false) {
    if (contacts.retrieve().getEmailAddress().equalsIgnoreCase(eml)){
    eventByType.insertSort(contacts.retrieve());
    contacts.findNext();
    } //if
    }//while
        if (contacts.retrieve().getEmailAddress().equalsIgnoreCase(eml))
         eventByType.insertSort(contacts.retrieve());
}//if 
return eventByType;
}


 
 public LinkedList<Contact> searchByAdress(String adrs){
      LinkedList<Contact> eventByType = new LinkedList<Contact> ()  ;    
  if (contacts.isEmpty()==false){
contacts.findFirst();
while (contacts.last()== false) {
    if (contacts.retrieve().getAddress().equalsIgnoreCase(adrs)){
    eventByType.insertSort(contacts.retrieve());
    contacts.findNext();
    } }
        if (contacts.retrieve().getAddress().equalsIgnoreCase(adrs))
         eventByType.insertSort(contacts.retrieve());
}
 return eventByType ;
}
 
 public LinkedList<Contact> searchByBirthday(String birth){
           LinkedList<Contact> eventByType = new LinkedList<Contact> ()  ;    
  if (contacts.isEmpty()==false){
contacts.findFirst();
while (contacts.last()== false) {
    if (contacts.retrieve().getBirthday().equals(birth)){
    eventByType.insertSort(contacts.retrieve());
    contacts.findNext();
    } }
       if (contacts.retrieve().getAddress().equals(birth))
         eventByType.insertSort(contacts.retrieve());
}
 return eventByType ;
}
 
 
 
 
public Event searchByEventTiltle(String title){
            
  if (events.isEmpty()==false){
events.findFirst();
while (events.last()== false) {
    if (events.retrieve().getTitle().equalsIgnoreCase(title))
        return events.retrieve();
    events.findNext();
     }
    if (events.retrieve().getTitle().equalsIgnoreCase(title)){
        return events.retrieve();
}
}
  return null ;
}


public void schedule (Contact ev, Event r){
   if (Search(ev)==true &&ev.addEvent(r)== true)
    System.out.println("schedulling contact" + ev.getContact_name() + "" + r.getTitle());
   else{
       if (Search(ev)== false) 
         System.out.println("contact does't exit");
       if (ev.addEvent(r)== false)
         System.out.println("there's conflict");
   } }
 
 

public static void displayMenu() {
    System.out.println ("Welcome to the linked tree phonebook!");
    System.out.println("Please choose an option:");
    System.out.println ("1. Add a contact");
    System.out.println ("2. Search for a contact");
    System.out.println ("3. Delete a contact");
    System.out.println ("4. Schedule an event");
    System.out.println ("5. Print event detail");
    System.out.println ("6. Print contacts by first name");
    System.out.println ("7. Print all events alphebetically");
    System.out.println ("8. Exit");
    
     System.out.println ("Enter your choice :");
     
}
}
